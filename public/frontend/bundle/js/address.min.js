/******/ (() => { // webpackBootstrap
var __webpack_exports__ = {};
/*!**********************************************!*\
  !*** ./resources/src/frontend/js/address.js ***!
  \**********************************************/
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var ADDRESS_FOR_NEW = {
  elements: {
    shipping_province: $('#address_new_shipping_province'),
    shipping_district: $('#address_new_shipping_district'),
    shipping_ward: $('#address_new_shipping_ward'),
    modal: $('.modal-add-address'),
    edit_btn: $('[address-editable-btn]')
  },
  province_loaded: false,
  district_loaded: false,
  ward_loaded: false,
  init: function init() {
    ADDRESS_FOR_NEW.loadProvinces();
    ADDRESS_FOR_NEW.onChangeProvince();
    ADDRESS_FOR_NEW.onChangeDistrict();
    ADDRESS_FOR_NEW.onCreate();
    ADDRESS_FOR_NEW.onCloseModal();
    ADDRESS_FOR_NEW.onEdit();
    ADDRESS_FOR_NEW.onMarkAsDefault();
    ADDRESS_FOR_NEW.onUseCurrentLocation();
  },
  parseBrowserTrackingLocation: function parseBrowserTrackingLocation(location) {
    var address = location.address;
    var amenity = (address === null || address === void 0 ? void 0 : address.amenity) || '';
    var road = (address === null || address === void 0 ? void 0 : address.road) || '';
    var quarter = (address === null || address === void 0 ? void 0 : address.quarter) || '';
    var village = (address === null || address === void 0 ? void 0 : address.village) || '';
    var suburb = (address === null || address === void 0 ? void 0 : address.suburb) || '';
    var citydistrict = (address === null || address === void 0 ? void 0 : address.city_district) || '';
    var city = (address === null || address === void 0 ? void 0 : address.city) || '';
    var postcode = (address === null || address === void 0 ? void 0 : address.postcode) || '';
    var country = 'Việt Nam';
    console.log('[TRACKING RESPONSE] Geo location: ', {
      amenity: amenity,
      road: road,
      quarter: quarter,
      village: village,
      suburb: suburb,
      citydistrict: citydistrict,
      city: city,
      postcode: postcode,
      country: country
    });
    return {
      road_name: [amenity, road].filter(function (item) {
        return !!item;
      }).join(', '),
      ward_name: quarter || village,
      district_name: suburb || citydistrict,
      province_name: city,
      country_name: country,
      postcode: postcode
    };
  },
  onUseCurrentLocation: function onUseCurrentLocation() {
    $('[use-current-location-to-set-address]').on('click', function () {
      if (navigator.geolocation) {
        var success = function success(position) {
          var latitude = position.coords.latitude;
          var longitude = position.coords.longitude;
          var reverseGeocodingAPI = 'https://nominatim.openstreetmap.org/reverse?format=json&lat=' + latitude + '&lon=' + longitude;
          fetch(reverseGeocodingAPI).then(function (response) {
            return response.json();
          }).then( /*#__PURE__*/function () {
            var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(location) {
              var parsedLocation, roadName, wardName, districtName, provinceName, countryName, postcode;
              return _regeneratorRuntime().wrap(function _callee$(_context) {
                while (1) switch (_context.prev = _context.next) {
                  case 0:
                    parsedLocation = ADDRESS_FOR_NEW.parseBrowserTrackingLocation(location);
                    roadName = parsedLocation.road_name;
                    wardName = parsedLocation.ward_name;
                    districtName = parsedLocation.district_name;
                    provinceName = parsedLocation.province_name;
                    countryName = parsedLocation.country_name;
                    postcode = parsedLocation.postcode;
                    $.ajax({
                      url: LOCALIZATION_ROUTES.api_get_address_by_locations_names,
                      method: 'GET',
                      data: {
                        province_name: provinceName,
                        district_name: districtName,
                        ward_name: wardName
                      },
                      success: function success(data) {
                        var ward = data.ward,
                          district = data.district,
                          province = data.province;
                        var wardCode = (ward === null || ward === void 0 ? void 0 : ward.code) || '';
                        var districtCode = (district === null || district === void 0 ? void 0 : district.code) || '';
                        var provinceCode = (province === null || province === void 0 ? void 0 : province.code) || '';
                        var myDisplayName = [roadName, (ward === null || ward === void 0 ? void 0 : ward.full_name) || '', (district === null || district === void 0 ? void 0 : district.full_name) || '', (province === null || province === void 0 ? void 0 : province.full_name) || '', postcode, countryName].filter(function (item) {
                          return !!item;
                        }).join(', ');
                        $('#address-form [name="address_line"]').val(myDisplayName);
                        ADDRESS_FOR_NEW.loadProvinces(function (_ref2) {
                          var data = _ref2.data;
                          ADDRESS_FOR_NEW.elements.modal.find('[name="province_code"]').val(provinceCode);
                          ADDRESS_FOR_NEW.loadDistrictByProvinceCode(provinceCode, function (_ref3) {
                            var data = _ref3.data;
                            ADDRESS_FOR_NEW.elements.modal.find('[name="district_code"]').val(districtCode);
                            ADDRESS_FOR_NEW.loadWardsByProvinceCode(districtCode, function () {
                              ADDRESS_FOR_NEW.elements.modal.find('[name="ward_code"]').val(wardCode);
                            });
                          });
                        });
                        $('.address-overlay').removeClass('show');
                      }
                    });
                  case 8:
                  case "end":
                    return _context.stop();
                }
              }, _callee);
            }));
            return function (_x) {
              return _ref.apply(this, arguments);
            };
          }())["catch"](function (error) {
            console.error('Error:', error);
            toastr.warning('Định vị địa lý không được hỗ trợ bởi trình duyệt này');
            $('.address-overlay').removeClass('show');
          });
        };
        var error = function error(err) {
          console.warn("ERROR(".concat(err.code, "): ").concat(err.message));
          toastr.warning('Định vị địa lý không được hỗ trợ bởi trình duyệt này');
          $('.address-overlay').removeClass('show');
        };
        var options = {
          enableHighAccuracy: true,
          timeout: 5000,
          maximumAge: 0
        };
        $('.address-overlay').addClass('show');
        navigator.geolocation.getCurrentPosition(success, error, options);
      } else {
        toastr.warning('Định vị địa lý không được hỗ trợ bởi trình duyệt này');
        $('.address-overlay').removeClass('show');
      }
    });
  },
  onEdit: function onEdit() {
    ADDRESS_FOR_NEW.elements.edit_btn.on('click', function () {
      var code = $(this).attr('data-address-code');
      $('.address-overlay').addClass('show');
      ADDRESS_FOR_NEW.fetchAddressById(code, function (address) {
        ADDRESS_FOR_NEW.updateModalTextByAction(true);
        ADDRESS_FOR_NEW.elements.modal.find('[name="name"]').val(address.name);
        ADDRESS_FOR_NEW.elements.modal.find('[name="email"]').val(address.email);
        ADDRESS_FOR_NEW.elements.modal.find('[name="phone"]').val(address.phone);
        ADDRESS_FOR_NEW.elements.modal.find('[name="address_line"]').val(address.address_line);
        ADDRESS_FOR_NEW.loadProvinces(function (_ref4) {
          var data = _ref4.data;
          ADDRESS_FOR_NEW.elements.modal.find('[name="province_code"]').val(address.province_code);
          ADDRESS_FOR_NEW.loadDistrictByProvinceCode(address.province_code, function (_ref5) {
            var data = _ref5.data;
            ADDRESS_FOR_NEW.elements.modal.find('[name="district_code"]').val(address.district_code);
            ADDRESS_FOR_NEW.loadWardsByProvinceCode(address.district_code, function () {
              ADDRESS_FOR_NEW.elements.modal.find('[name="ward_code"]').val(address.ward_code);
              handleWhenAddLoaded();
            });
          });
        });
        function handleWhenAddLoaded() {
          ADDRESS_FOR_NEW.elements.modal.find('[name="is_default"]').prop('checked', address.is_default);
          ADDRESS_FOR_NEW.elements.modal.attr('open', true);
        }
      });
      $('.address-overlay').removeClass('show');
    });
  },
  onCreate: function onCreate() {
    $('.show-modal-add-address').on('click', function () {
      var userData = JSON.parse($('[data-authenticated-user]').attr('data-authenticated-user') || '{}');
      ADDRESS_FOR_NEW.elements.modal.find('[name="name"]').val(userData === null || userData === void 0 ? void 0 : userData.name);
      ADDRESS_FOR_NEW.elements.modal.find('[name="email"]').val(userData === null || userData === void 0 ? void 0 : userData.email);
      ADDRESS_FOR_NEW.elements.modal.find('[name="phone"]').val(userData === null || userData === void 0 ? void 0 : userData.phone_number);
      ADDRESS_FOR_NEW.updateModalTextByAction(false);
      ADDRESS_FOR_NEW.elements.modal.attr('open', true);
      $('.address-overlay').removeClass('show');
    });
  },
  onCloseModal: function onCloseModal() {
    $('.modal-add-address [data-overlay-close]').on('click', function () {
      ADDRESS_FOR_NEW.updateModalTextByAction(null);
      ADDRESS_FOR_NEW.elements.modal.removeAttr('open');
      $('.address-overlay').removeClass('show');
    });
  },
  buildHTMLOptions: function buildHTMLOptions(data) {
    var emptyLabel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    if (!(data !== null && data !== void 0 && data.length)) {
      return "<option value=\"\" selected>".concat(emptyLabel, "</option>");
    }
    var options = data.map(function (item) {
      return "<option value=\"".concat(item.code, "\">").concat(item.full_name, "</option>");
    });
    return ["<option value=\"\" selected>".concat(emptyLabel, "</option>")].concat(_toConsumableArray(options)).join('');
  },
  onChangeProvince: function onChangeProvince() {
    ADDRESS_FOR_NEW.elements.shipping_province.on('change', function () {
      var code = $(this).val();
      ADDRESS_FOR_NEW.loadDistrictByProvinceCode(code);
    });
  },
  onChangeDistrict: function onChangeDistrict() {
    ADDRESS_FOR_NEW.elements.shipping_district.on('change', function () {
      var code = $(this).val();
      ADDRESS_FOR_NEW.loadWardsByProvinceCode(code);
    });
  },
  loadProvinces: function loadProvinces() {
    var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {
      return undefined;
    };
    $.ajax({
      url: LOCALIZATION_ROUTES.api_provinces,
      method: 'GET',
      beforeSend: function beforeSend() {
        ADDRESS_FOR_NEW.elements.shipping_province.prop('disabled', true);
        ADDRESS_FOR_NEW.elements.shipping_district.prop('disabled', true);
        ADDRESS_FOR_NEW.elements.shipping_ward.prop('disabled', true);
      },
      success: function success(response) {
        ADDRESS_FOR_NEW.elements.shipping_province.html(ADDRESS_FOR_NEW.buildHTMLOptions(response === null || response === void 0 ? void 0 : response.data, 'Chọn tỉnh / thành'));
        ADDRESS_FOR_NEW.elements.shipping_province.prop('disabled', false);
        return callback({
          data: response
        });
      }
    });
  },
  loadDistrictByProvinceCode: function loadDistrictByProvinceCode(code) {
    var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {
      return undefined;
    };
    ADDRESS_FOR_NEW.elements.shipping_district.html(ADDRESS_FOR_NEW.buildHTMLOptions([], 'Chọn quận / huyện'));
    ADDRESS_FOR_NEW.elements.shipping_ward.html(ADDRESS_FOR_NEW.buildHTMLOptions([], 'Chọn phường / xã'));
    $.ajax({
      url: LOCALIZATION_ROUTES.api_districts_by_province.replace(':province', code),
      method: 'GET',
      beforeSend: function beforeSend() {
        ADDRESS_FOR_NEW.elements.shipping_province.prop('disabled', true);
        ADDRESS_FOR_NEW.elements.shipping_district.prop('disabled', true);
        ADDRESS_FOR_NEW.elements.shipping_ward.prop('disabled', true);
      },
      success: function success(response) {
        ADDRESS_FOR_NEW.elements.shipping_district.html(ADDRESS_FOR_NEW.buildHTMLOptions(response === null || response === void 0 ? void 0 : response.data, 'Chọn quận / huyện'));
        ADDRESS_FOR_NEW.elements.shipping_province.prop('disabled', false);
        ADDRESS_FOR_NEW.elements.shipping_district.prop('disabled', false);
        return callback({
          code: code,
          data: response
        });
      }
    });
  },
  loadWardsByProvinceCode: function loadWardsByProvinceCode(code) {
    var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {
      return undefined;
    };
    $.ajax({
      url: LOCALIZATION_ROUTES.api_wards_by_district.replace(':district', code),
      method: 'GET',
      beforeSend: function beforeSend() {
        ADDRESS_FOR_NEW.elements.shipping_province.prop('disabled', true);
        ADDRESS_FOR_NEW.elements.shipping_district.prop('disabled', true);
        ADDRESS_FOR_NEW.elements.shipping_ward.prop('disabled', true);
      },
      success: function success(response) {
        ADDRESS_FOR_NEW.elements.shipping_ward.html(ADDRESS_FOR_NEW.buildHTMLOptions(response === null || response === void 0 ? void 0 : response.data, 'Chọn phường / xã'));
        ADDRESS_FOR_NEW.elements.shipping_province.prop('disabled', false);
        ADDRESS_FOR_NEW.elements.shipping_district.prop('disabled', false);
        ADDRESS_FOR_NEW.elements.shipping_ward.prop('disabled', false);
        return callback({
          code: code,
          data: response
        });
      }
    });
  },
  fetchAddressById: function fetchAddressById(code) {
    var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {
      return undefined;
    };
    $.ajax({
      url: LOCALIZATION_ROUTES.api_address_detail.replace(':code', code),
      method: 'GET',
      beforeSend: function beforeSend() {
        ADDRESS_FOR_NEW.elements.edit_btn.addClass('prevent');
      },
      success: function success(response) {
        return callback(response);
      }
    });
  },
  updateModalTextByAction: function updateModalTextByAction() {
    var editable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    if (editable === null) {
      ADDRESS_FOR_NEW.elements.modal.find('[data-form-title-text]').text('');
      ADDRESS_FOR_NEW.elements.modal.find('[data-button-submit-text]').text('');
      ADDRESS_FOR_NEW.elements.modal.find('[data-form]').attr('data-form', '');
      ADDRESS_FOR_NEW.elements.modal.find('[name="name"]').val('');
      ADDRESS_FOR_NEW.elements.modal.find('[name="email"]').val('');
      ADDRESS_FOR_NEW.elements.modal.find('[name="phone"]').val('');
      ADDRESS_FOR_NEW.elements.modal.find('[name="address_line"]').val('');
      ADDRESS_FOR_NEW.elements.modal.find('[name="province_code"]').val('');
      ADDRESS_FOR_NEW.elements.modal.find('[name="district_code"]').val('');
      ADDRESS_FOR_NEW.elements.modal.find('[name="ward_code"]').val('');
      ADDRESS_FOR_NEW.elements.modal.find('[name="is_default"]').prop('checked', true);
      return;
    }
    if (editable) {
      ADDRESS_FOR_NEW.elements.modal.find('[data-form-title-text]').text('Chỉnh sửa địa chỉ');
      ADDRESS_FOR_NEW.elements.modal.find('[data-button-submit-text]').text('Cập nhật');
      ADDRESS_FOR_NEW.elements.modal.find('[data-form]').attr('data-form', 'edit-address');
    } else {
      ADDRESS_FOR_NEW.elements.modal.find('[data-form-title-text]').text('Thêm địa chỉ');
      ADDRESS_FOR_NEW.elements.modal.find('[data-button-submit-text]').text('Thêm mới');
      ADDRESS_FOR_NEW.elements.modal.find('[data-form]').attr('data-form', 'create-address');
    }
  },
  onMarkAsDefault: function onMarkAsDefault() {
    $('.mark-as-default-address').on('click', function (e) {
      var _this = this;
      e.preventDefault();
      $.ajax({
        url: $(this).attr('href'),
        method: $(this).attr('data-method'),
        data: {},
        beforeSend: function beforeSend() {
          $(_this).text('Đang cập nhật');
          $(_this).addClass('prevent');
        },
        success: function success() {
          location.reload();
        },
        error: function error() {
          toastr.error('Cập nhật không thành công');
          $(_this).removeClass('prevent');
          $(_this).text('Đặt làm mặt định');
        }
      });
    });
  }
};
ADDRESS_FOR_NEW.init();
$(document).ready(function () {
  $('#address-form').validate({
    rules: {
      name: {
        required: true,
        minlength: 2,
        maxlength: 255
      },
      email: {
        required: false,
        maxlength: 255,
        validate_email: true
      },
      phone: {
        required: true,
        minlength: 8,
        maxlength: 13,
        validate_phone: true
      },
      province_code: {
        required: true
      },
      district_code: {
        required: true
      },
      ward_code: {
        required: true
      },
      address_line: {
        required: true,
        minlength: 2,
        maxlength: 255
      },
      is_default: {
        required: false
      }
    },
    messages: {
      name: {
        required: 'Vui lòng nhập họ và tên',
        maxlength: 'Không lớn hơn 255 ký tự',
        minlength: 'Tên bạn quá ngắn'
      },
      email: {
        required: 'Vui lòng nhập e-mail',
        maxlength: 'Không lớn hơn 255 ký tự',
        validate_email: "E-mail không hợp lệ"
      },
      province_code: {
        required: 'Vui lòng tỉnh / thành'
      },
      district_code: {
        required: 'Vui lòng quận / huyện'
      },
      ward_code: {
        required: 'Vui lòng phường / xã'
      },
      phone: {
        required: 'Vui lòng nhập số điện thoại',
        maxlength: 'Không lớn hơn 13 ký tự',
        minlength: 'Số điện thoại quá ngắn',
        validate_phone: "Số điện thoại không hợp lệ"
      },
      address_line: {
        required: 'Vui lòng nhập địa chỉ',
        maxlength: 'Không lớn hơn 255 ký tự',
        minlength: 'Địa chỉ nhận bạn quá ngắn'
      }
    },
    submitHandler: function submitHandler(form) {
      var formData = $(form).serialize();
      var route = $(form).attr('action');
      var method = $(form).attr('method');
      var $self = $(form);
      var redirectUrl = $(form).attr('data-redirect');
      var originalButtonText = $self.find('[data-button-submit-text]').text();
      $.ajax({
        url: route,
        method: method,
        data: formData,
        beforeSend: function beforeSend() {
          $self.find('button[type="submit"]').prop('disabled', true);
          $self.find('[data-button-submit-text]').text('Đang xử lý...');
        },
        success: function success(response) {
          toastr.success(method == 'POST' ? 'Thêm thành công,' : 'Cập nhật thành công.');
          if (redirectUrl) {
            return window.location.href = redirectUrl;
          }
          window.location.reload();
        },
        error: function error() {
          $self.find('button[type="submit"]').prop('disabled', false);
          $self.find('[data-button-submit-text]').text(originalButtonText);
          toastr.error(method == 'POST' ? 'Thêm không thành công,' : 'Cập nhật không thành công.');
        }
      });
    }
  });
});
/******/ })()
;